Chef has just started watching Game of Thrones, and he wants to first calculate the exact time (in minutes) that it'll take him to complete the series.

The series has SS seasons, and the i^{th}i th season has E_iE i
episodes, each of which are L_{i,1}, L_{i,2}, \ldots, L_{i,E_i}L i,1,L i,2,…,L i,E i minutes long. Note that these L_{i,j}L i,j include the duration of the beginning intro song in each episode. The streaming service that he uses, allows Chef to skip the intro song. The intro song changes slightly each season, and so he wants to watch the intro song in the first episode of each season, but he'll skip it in all other episodes of that season (yes, we know, a sacrilege!). You know that the intro song lasts for Q_iQ i
minutes in the i^{th}i th season.

Find the total time in minutes, that he has to watch.

Input:
First line will contain a single integer, TT, denoting the number of testcases. Then the testcases follow.
The first line of each testcase will contain a single integer SS, denoting the total number of seasons.
The second line contains SS space separated integers, Q_1, Q_2, \ldots, Q_SQ 1,Q ,…,Q S, where Q_iQ i denotes the duration of the intro song in the i^{th}i th season.
The i^{th}i th of the next SS lines contains E_i + 1E i +1 space separated integers, where the first integer is E_iE i denoting the number of episodes in the i^{th}i th season. That is followed by the duration of each of the E_iE 
i episodes, L_{i,1}, L_{i,2}, \ldots, L_{i,E_i}L i,1,L i,2,…,L i,E i

Output:
For each testcase, output the answer in a single line.

Constraints
1 \leq T \leq 51≤T≤5
1 \leq S \leq 10^51≤S≤10 
5
 
2 \leq L_{i,j} \leq 10^52≤L 
i,j
​
 ≤10 
5
 
1 \leq E_i1≤E 
i
​
 
Sum of all E_iE 
i
​
  in a single testcase is at most 10^510 
5
 
1 \leq Q_i \lt L_{i,j}1≤Q 
i
​
 <L 
i,j
​
 , for all valid jj.
Sample 1:
Input
Output
1
2
1 2
1 2
2 3 4
7
Explanation:
1 in the beginning denotes there is only 11 test case.

Testcase 1:

There are 22 seasons. The intro song in each of the first season episodes lasts for 11 minute, and the intro song in the second season episodes lasts for 22 minutes each.

For the first season, since there is only 11 episode, Chef will be watching it completely - 22 minutes.

For the second season, Chef will be watching the first episode completely (33 minutes) and will skip the intro song of the second episode (4 - 2 = 24−2=2 minutes).

So, the total time spent is 2 + (3 + (4 - 2)) = 72+(3+(4−2))=7 minutes.

Sample 2:
Input
Output
2
1
10
5 11 11 11 11 11
5
10 10 10 10 10
1 11
1 11
1 11
1 11
1 11
15
55
Explanation:
2 in the beginning denotes there are 22 test cases.

Testcase 1:

There is only 11 season having intro song for 1010 minutes.

Chef will have to watch the entire first episode including the intro song and will be skipping the same in further seasons.

So, the total time spent is (11 + (11 - 10) * 4) = 15(11+(11−10)∗4)=15 minutes.

Testcase 2:

There are total 55 seasons. The intro song in every season lasts for 1010 minutes.

For each of the five seasons, since there is only 11 episode, Chef will be watching all of them completely - 1111 minutes each.

So, the total time spent is 11 * 5 = 5511∗5=55 minutes.

---------------------------------------------------------------------------
import java.io.*;
import java.util.*;

class clg {
  public static void main(String[] args) {
    Scanner sc = new Scanner(System.in);
    
    int t = sc.nextInt();  
      
    for(int i=0;i<t;i++){
      
      int s = sc.nextInt(); 
      int[] intro = new int[s];
      long total=0;
      for(int j=0;j<s;j++){
      
        intro[j] = sc.nextInt();
        
        
        for(int k=0;k<s;k++){
          
          int ep = sc.nextInt();
          
          for(int p=0;p<ep;p++){
            int dur = sc.nextInt();
            if(p == 0){
              total+= dur;
            }else{
              total+= (dur - intro[p]);
            }
          }    
        }
      }
      System.out.println(total);
      }
      
    }
}
	// Scanner sc = new Scanner(System.in);
	// 	int t = sc.nextInt();
	// 	while(t-->0)
	// 	{
	// 	    int s = sc.nextInt();
	// 	    int a[] = new int[s];
	// 	    for (int i=0;i<s;i++)
	// 	    {
	// 	        a[i]=sc.nextInt();
	// 	    }
	// 	    long r =0;
	// 	    for(int i=0;i<s;i++)
	// 	    {
	// 	        int n = sc.nextInt();
		        
	// 	        int arr[] = new int[n];
	// 	        for(int j=0;j<n;j++)
	// 	        {
	// 	            arr[j]=sc.nextInt();
	// 	            if(j==0){
	// 	            r=r+arr[j];
	// 	            }
	// 	            else
	// 	            {
	// 	                r=r+(arr[j]-a[i]);
	// 	            }
	// 	        }
		        
		        
	// 	    }
	// 	    System.out.println(r);
	// 	}
